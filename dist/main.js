(()=>{"use strict";var e={99:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(15),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([e.id,"*{margin:0;padding:0;box-sizing:border-box}body{background:#dce35b;background:linear-gradient(to right, #6aeb6e, #6be66b)}.box{margin-top:5%;margin-bottom:5%}h1{padding-top:10px;color:#006400}h3{text-transform:capitalize;margin:10px}.project-box{border:1px solid #000;border-radius:20px;width:900px;margin-top:10px}.project-box ul li{margin:.5% 0}","",{version:3,sources:["webpack://./src/styles.scss"],names:[],mappings:"AAAA,EACE,QAAA,CACA,SAAA,CACA,qBAAA,CAGF,KACE,kBAAA,CACA,sDAAA,CAGF,KACE,aAAA,CACA,gBAAA,CAGF,GACE,gBAAA,CACA,aAAA,CAGF,GACE,yBAAA,CACA,WAAA,CAGF,aACE,qBAAA,CACA,kBAAA,CACA,WAAA,CACA,eAAA,CAGF,mBACE,YAAA",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  background: #dce35b;\n  background: linear-gradient(to right, #6aeb6e, #6be66b);\n}\n\n.box {\n  margin-top: 5%;\n  margin-bottom: 5%;\n}\n\nh1 {\n  padding-top: 10px;\n  color: darkgreen;\n}\n\nh3 {\n  text-transform: capitalize;\n  margin: 10px;\n}\n\n.project-box {\n  border: 1px solid black;\n  border-radius: 20px;\n  width: 900px;\n  margin-top: 10px;\n}\n\n.project-box ul li {\n  margin: 0.5% 0;\n}\n\n.project-box ul li button {\n  // float: right;\n  // margin-right: 20px;\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==c.return||c.return()}finally{if(o)throw i}}return n}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(u," */"),s=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[i].concat(s).concat([l]).join("\n")}return[i].join("\n")}},379:(e,t,n)=>{var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),i=[];function a(e){for(var t=-1,n=0;n<i.length;n++)if(i[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},r=[],o=0;o<e.length;o++){var c=e[o],u=t.base?c[0]+t.base:c[0],l=n[u]||0,s="".concat(u," ").concat(l);n[u]=l+1;var d=a(s),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(i[d].references++,i[d].updater(p)):i.push({identifier:s,updater:A(p,t),references:1}),r.push(s)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,s=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=s(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function p(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,f=0;function A(e,t){var n,r,o;if(t.singleton){var i=f++;n=m||(m=u(t)),r=d.bind(null,n,i,!1),o=d.bind(null,n,i,!0)}else n=u(t),r=p.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=a(n[r]);i[o].references--}for(var u=c(e,t),l=0;l<n.length;l++){var s=a(n[l]);0===i[s].references&&(i[s].updater(),i.splice(s,1))}n=u}}}}},t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var r={};(()=>{n.d(r,{w:()=>m,r:()=>f});var e=n(379),t=n.n(e),o=n(99);function i(e){return{name:e,list:[]}}t()(o.Z,{insert:"head",singleton:!1}),o.Z.locals;const a=e=>JSON.parse(localStorage.getItem(e)),c=(e,t)=>{localStorage.setItem("projects",JSON.stringify(e)),localStorage.setItem("currentId",t)},u=e=>{const t=document.querySelector("#all-projects-content");document.querySelector("#all-projects-content").innerHTML="",e.forEach((e=>{const n=document.createElement("div");n.setAttribute("class",` ${e.name}-project project-box`);const r=document.createElement("h3");r.textContent=e.name;const o=document.createElement("ul");o.id=`${e.name}-list`,n.append(r,o),t.appendChild(n),e.list.forEach((t=>{const n=document.createElement("li"),r=(i=t.duedate,new Date(i).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"}));var i;n.textContent=`${t.title}, Date: ${r}, Priority: ${t.priority}`;const a=document.createElement("button"),c=document.createElement("button");a.innerHTML='<img src="https://img.icons8.com/fluent-systems-regular/15/000000/edit-property.png" />',a.setAttribute("class"," btn btn-primary"),c.innerHTML='<img src="https://img.icons8.com/material-sharp/15/000000/delete-forever.png" />',c.setAttribute("class","delete-btn btn btn-danger"),a.onclick=()=>f(t,e),c.onclick=()=>m(t,e),n.append(a,c),o.appendChild(n)}))}))},l={projects:null==localStorage.getItem("projects")?[]:a("projects"),id:null==localStorage.getItem("currentId")?0:a("currentId")},{projects:s}=l;let{id:d}=l;const p=(e,t,n,r,o,i="Empty")=>("Empty"===i?d+=1:d=i,{id:d,title:e,duedate:t,desc:n,note:r,priority:o}),m=(e,t)=>{const n=s.find((e=>e.name===t.name));n.list=n.list.filter((t=>t.id!==e.id)),c(s,d),u(s)},f=(e,t)=>{const n=document.querySelector("#inputtitle"),r=document.querySelector("#inputdate"),o=document.querySelector("#inputdescription"),a=document.querySelector("#inputnote"),l=document.querySelector("#inputpriority"),f=document.querySelector("#inputproject");n.value=e.title,r.value=e.duedate,o.value=e.description,a.value=e.note,l.value=e.priority,f.value=t.name;const A=document.createElement("button"),b=document.querySelector("#btn-div");b.innerHTML="",A.setAttribute("class","btn btn-primary"),A.setAttribute("id","tasksubmit"),A.textContent="Modify Task",b.append(A),A.onclick=()=>((e,t)=>{const n=document.querySelector("#inputtitle").value,r=document.querySelector("#inputdate").value,o=document.querySelector("#inputdescription").value,a=document.querySelector("#inputnote").value,l=document.querySelector("#inputpriority").value;let f=document.querySelector("#inputproject").value;f=""===f?"default":f;const A=e.id,b=s.find((e=>e.name===t.name)),y=s.find((e=>e.name===f)),g=b.list.find((e=>e.id===A)),v=p(n,r,o,a,l,A);if(null==y){const e=i(f);e.list.push(v),s.push(e),m(g,b)}else y.name===b.name?y.list=y.list.map((e=>e.id===A?v:e)):(y.list.push(v),m(g,b));return c(s,d),u(s),!1})(e,t)};if(0===s.length){const e=i("default");s.push(e)}else u(s);document.querySelector("#tasksubmit").onclick=()=>{const e=document.querySelector("#inputtitle").value,t=document.querySelector("#inputdate").value,n=document.querySelector("#inputdescription").value,r=document.querySelector("#inputnote").value,o=document.querySelector("#inputpriority").value;let a=document.querySelector("#inputproject").value;a=""===a?"default":a;const l=p(e,t,n,r,o);if(!(m=[],s.forEach((e=>m.push(e.name))),m).includes(a)){const e=i(a);s.push(e)}var m,f,A;f=l,A=a,s.find((e=>e.name===A)).list.push(f),c(s,d),u(s)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,